import { UserRole } from '@/lib/types/po';

/**
 * Get default route for user role after login
 */
export function getDefaultRouteForRole(role: string): string {
  console.log(`üîç [ROUTE] getDefaultRouteForRole called with: "${role}" (type: ${typeof role})`);
  
  // Normalize role string
  const normalizedRole = role?.trim();
  console.log(`üîç [ROUTE] Normalized role: "${normalizedRole}"`);
  
  switch (normalizedRole) {
    case 'AppUser':
    case UserRole.APP_USER:
      console.log(`‚úÖ [ROUTE] AppUser detected ‚Üí /po/list`);
      return '/po/list';
    
    case 'MaterialControl':
    case UserRole.MATERIAL_CONTROL:
      console.log(`‚úÖ [ROUTE] MaterialControl detected ‚Üí /po/material`);
      return '/po/material';
    
    default:
      console.warn(`‚ùå [ROUTE] Unknown role for routing: "${role}"`);
      return '/auth/unauthorized';
  }
}

/**
 * Check if user has valid role (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2 roles ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï)
 */
export function isValidRole(role: string): boolean {
  console.log(`üîç [VALIDATION] isValidRole called with: "${role}" (type: ${typeof role})`);
  
  const allowedRoles = ['AppUser', 'MaterialControl'];
  const normalizedRole = role?.trim();
  const isValid = allowedRoles.includes(normalizedRole);
  
  console.log(`üîç [VALIDATION] Allowed roles:`, allowedRoles);
  console.log(`üîç [VALIDATION] Normalized role: "${normalizedRole}"`);
  console.log(`üîç [VALIDATION] Is valid: ${isValid}`);
  
  return isValid;
}

/**
 * Map backend roles to primary role for the system
 * ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ AppUser ‡πÅ‡∏•‡∏∞ MaterialControl ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 */
export function mapRolesToPrimaryRole(roles: string[]): string | null {
  console.log(`üîç [ROLE_MAPPING] mapRolesToPrimaryRole called with:`, roles);
  
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2 roles ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  // AppUser ‡∏Å‡πà‡∏≠‡∏ô (principle of least privilege)
  if (roles.includes('AppUser')) {
    console.log(`‚úÖ [ROLE_MAPPING] Found AppUser role ‚Üí AppUser`);
    return 'AppUser';
  }
  
  if (roles.includes('MaterialControl')) {
    console.log(`‚úÖ [ROLE_MAPPING] Found MaterialControl role ‚Üí MaterialControl`);
    return 'MaterialControl';
  }
  
  // ‡πÑ‡∏°‡πà‡∏°‡∏µ role ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
  console.warn(`‚ùå [ROLE_MAPPING] No valid role found in:`, roles);
  console.warn(`‚ùå [ROLE_MAPPING] Only 'AppUser' and 'MaterialControl' are allowed`);
  return null;
}

/**
 * Check if user can access specific route
 */
export function canAccessRoute(userRole: string, route: string): boolean {
  const routePermissions: Record<string, string[]> = {
    '/po/list': ['AppUser', 'MaterialControl'],
    '/po/material': ['MaterialControl'],
    '/po/[id]/edit': ['AppUser', 'MaterialControl'],
    '/po/[id]/send-email': ['MaterialControl'],
    '/po/[id]/acknowledge-status': ['MaterialControl'],
  };
  
  const allowedRoles = routePermissions[route];
  return allowedRoles ? allowedRoles.includes(userRole?.trim()) : false;
}